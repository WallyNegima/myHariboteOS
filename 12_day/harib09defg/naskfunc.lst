     1                                  ; naskfunc
     2                                  ; TAB=4
     3                                  
     4                                  ;[FORMAT "WCOFF"]				; オブジェクトファイルを作るモード ; NASMではエラーが出るのでこの行削除	
     5                                  ;[INSTRSET "i486p"]				; 486の命令まで使いたいという記述 ; NASMではエラーが出るのでこの行削除
     6                                  [BITS 32]						; 32ビットモード用の機械語を作らせる
     7                                  ;[FILE "naskfunc.nas"]			; ソースファイル名情報 ; NASMではエラーが出るのでこの行削除
     8                                  
     9                                  		; 以下、アンダーバー付き関数名からアンダーバー除いた関数名に修正する
    10                                  		; _io_hlt →　io_hlt など
    11                                  		GLOBAL	io_hlt, io_cli, io_sti, io_stihlt
    12                                  		GLOBAL	io_in8,  io_in16,  io_in32
    13                                  		GLOBAL	io_out8, io_out16, io_out32
    14                                  		GLOBAL	io_load_eflags, io_store_eflags
    15                                  		GLOBAL	load_gdtr, load_idtr
    16                                  		GLOBAL	load_cr0, store_cr0
    17                                  		GLOBAL	asm_inthandler20, asm_inthandler21, asm_inthandler27, asm_inthandler2c
    18                                  		GLOBAL	memtest_sub
    19                                  		EXTERN	inthandler20, inthandler21
    20                                  		EXTERN  inthandler27, inthandler2c
    21                                  
    22                                  [SECTION .text]
    23                                  
    24                                  io_hlt:	; void io_hlt(void);
    25 00000000 F4                      		HLT
    26 00000001 C3                      		RET
    27                                  
    28                                  io_cli:	; void io_cli(void);
    29 00000002 FA                      		CLI
    30 00000003 C3                      		RET
    31                                  
    32                                  io_sti:	; void io_sti(void);
    33 00000004 FB                      		STI
    34 00000005 C3                      		RET
    35                                  
    36                                  io_stihlt:	; void io_stihlt(void);
    37 00000006 FB                      		STI
    38 00000007 F4                      		HLT
    39 00000008 C3                      		RET
    40                                  
    41                                  io_in8:	; int io_in8(int port);
    42 00000009 8B542404                		MOV		EDX,[ESP+4]		; port
    43 0000000D B800000000              		MOV		EAX,0
    44 00000012 EC                      		IN		AL,DX
    45 00000013 C3                      		RET
    46                                  
    47                                  io_in16:	; int io_in16(int port);
    48 00000014 8B542404                		MOV		EDX,[ESP+4]		; port
    49 00000018 B800000000              		MOV		EAX,0
    50 0000001D 66ED                    		IN		AX,DX
    51 0000001F C3                      		RET
    52                                  
    53                                  io_in32:	; int io_in32(int port);
    54 00000020 8B542404                		MOV		EDX,[ESP+4]		; port
    55 00000024 ED                      		IN		EAX,DX
    56 00000025 C3                      		RET
    57                                  
    58                                  io_out8:	; void io_out8(int port, int data);
    59 00000026 8B542404                		MOV		EDX,[ESP+4]		; port
    60 0000002A 8A442408                		MOV		AL,[ESP+8]		; data
    61 0000002E EE                      		OUT		DX,AL
    62 0000002F C3                      		RET
    63                                  
    64                                  io_out16:	; void io_out16(int port, int data);
    65 00000030 8B542404                		MOV		EDX,[ESP+4]		; port
    66 00000034 8B442408                		MOV		EAX,[ESP+8]		; data
    67 00000038 66EF                    		OUT		DX,AX
    68 0000003A C3                      		RET
    69                                  
    70                                  io_out32:	; void io_out32(int port, int data);
    71 0000003B 8B542404                		MOV		EDX,[ESP+4]		; port
    72 0000003F 8B442408                		MOV		EAX,[ESP+8]		; data
    73 00000043 EF                      		OUT		DX,EAX
    74 00000044 C3                      		RET
    75                                  
    76                                  io_load_eflags:	; int io_load_eflags(void);
    77 00000045 9C                      		PUSHFD		; PUSH EFLAGS という意味
    78 00000046 58                      		POP		EAX
    79 00000047 C3                      		RET
    80                                  
    81                                  io_store_eflags:	; void io_store_eflags(int eflags);
    82 00000048 8B442404                		MOV		EAX,[ESP+4]
    83 0000004C 50                      		PUSH	EAX
    84 0000004D 9D                      		POPFD		; POP EFLAGS という意味
    85 0000004E C3                      		RET
    86                                  
    87                                  load_gdtr:		; void load_gdtr(int limit, int addr);
    88 0000004F 668B442404              		MOV		AX,[ESP+4]		; limit
    89 00000054 6689442406              		MOV		[ESP+6],AX
    90 00000059 0F01542406              		LGDT	[ESP+6]
    91 0000005E C3                      		RET
    92                                  
    93                                  load_idtr:		; void load_idtr(int limit, int addr);
    94 0000005F 668B442404              		MOV		AX,[ESP+4]		; limit
    95 00000064 6689442406              		MOV		[ESP+6],AX
    96 00000069 0F015C2406              		LIDT	[ESP+6]
    97 0000006E C3                      		RET
    98                                  
    99                                  load_cr0:
   100 0000006F 0F20C0                  		MOV		EAX,CR0
   101 00000072 C3                      		RET
   102                                  
   103                                  store_cr0:
   104 00000073 8B442404                		MOV		EAX,[ESP+4]
   105 00000077 0F22C0                  		MOV		CR0,EAX
   106 0000007A C3                      		RET
   107                                  
   108                                  asm_inthandler20:
   109 0000007B 06                      		PUSH	ES
   110 0000007C 1E                      		PUSH	DS
   111 0000007D 60                      		PUSHAD
   112 0000007E 89E0                    		MOV		EAX,ESP
   113 00000080 50                      		PUSH	EAX
   114 00000081 668CD0                  		MOV		AX,SS
   115 00000084 8ED8                    		MOV		DS,AX
   116 00000086 8EC0                    		MOV		ES,AX
   117 00000088 E8(00000000)            		CALL	inthandler20
   118 0000008D 58                      		POP		EAX
   119 0000008E 61                      		POPAD
   120 0000008F 1F                      		POP		DS
   121 00000090 07                      		POP		ES
   122 00000091 CF                      		IRETD
   123                                  
   124                                  asm_inthandler21:
   125 00000092 06                      		PUSH	ES
   126 00000093 1E                      		PUSH	DS
   127 00000094 60                      		PUSHAD
   128 00000095 89E0                    		MOV		EAX,ESP
   129 00000097 50                      		PUSH	EAX
   130 00000098 668CD0                  		MOV		AX,SS
   131 0000009B 8ED8                    		MOV		DS,AX
   132 0000009D 8EC0                    		MOV		ES,AX
   133 0000009F E8(00000000)            		CALL	inthandler21
   134 000000A4 58                      		POP		EAX
   135 000000A5 61                      		POPAD
   136 000000A6 1F                      		POP		DS
   137 000000A7 07                      		POP		ES
   138 000000A8 CF                      		IRETD
   139                                  
   140                                  asm_inthandler27:
   141 000000A9 06                      		PUSH	ES
   142 000000AA 1E                      		PUSH	DS
   143 000000AB 60                      		PUSHAD
   144 000000AC 89E0                    		MOV		EAX,ESP
   145 000000AE 50                      		PUSH	EAX
   146 000000AF 668CD0                  		MOV		AX,SS
   147 000000B2 8ED8                    		MOV		DS,AX
   148 000000B4 8EC0                    		MOV		ES,AX
   149 000000B6 E8(00000000)            		CALL	inthandler27
   150 000000BB 58                      		POP		EAX
   151 000000BC 61                      		POPAD
   152 000000BD 1F                      		POP		DS
   153 000000BE 07                      		POP		ES
   154 000000BF CF                      		IRETD
   155                                  
   156                                  asm_inthandler2c:
   157 000000C0 06                      		PUSH	ES
   158 000000C1 1E                      		PUSH	DS
   159 000000C2 60                      		PUSHAD
   160 000000C3 89E0                    		MOV		EAX,ESP
   161 000000C5 50                      		PUSH	EAX
   162 000000C6 668CD0                  		MOV		AX,SS
   163 000000C9 8ED8                    		MOV		DS,AX
   164 000000CB 8EC0                    		MOV		ES,AX
   165 000000CD E8(00000000)            		CALL	inthandler2c
   166 000000D2 58                      		POP		EAX
   167 000000D3 61                      		POPAD
   168 000000D4 1F                      		POP		DS
   169 000000D5 07                      		POP		ES
   170 000000D6 CF                      		IRETD
   171                                  
   172                                  memtest_sub:
   173 000000D7 57                      		PUSH		EDI
   174 000000D8 56                      		PUSH		ESI
   175 000000D9 53                      		PUSH		EBX
   176 000000DA BE55AA55AA              		MOV			ESI, 0xaa55aa55
   177 000000DF BFAA55AA55              		MOV			EDI, 0x55aa55aa
   178 000000E4 8B442410                		MOV			EAX,[ESP+12+4]
   179                                  
   180                                  mts_loop:
   181 000000E8 89C3                    		MOV		EBX,EAX
   182 000000EA 81C3FC0F0000            		ADD		EBX, 0xffc
   183 000000F0 8B13                    		MOV		EDX,[EBX]
   184 000000F2 8933                    		MOV		[EBX],ESI
   185 000000F4 8333FF                  		XOR		DWORD [EBX], 0xffffffff;
   186 000000F7 3B3B                    		CMP		EDI,[EBX]
   187 000000F9 7518                    		JNE		mts_fin
   188 000000FB 8333FF                  		XOR		DWORD [EBX], 0xffffffff;
   189 000000FE 3B33                    		CMP		ESI,[EBX]
   190 00000100 7511                    		JNE		mts_fin
   191 00000102 8913                    		MOV		[EBX],EDX
   192 00000104 0500100000              		ADD		EAX,0x1000
   193 00000109 3B442414                		CMP		EAX,[ESP+12+8]
   194 0000010D 76D9                    		JBE		mts_loop
   195 0000010F 5B                      		POP		EBX
   196 00000110 5E                      		POP		ESI
   197 00000111 5F                      		POP		EDI
   198 00000112 C3                      		RET
   199                                  
   200                                  mts_fin
   200          ******************       warning: label alone on a line without a colon might be in error [-w+label-orphan]
   201 00000113 8913                    		MOV		[EBX],EDX
   202 00000115 5B                      		POP		EBX
   203 00000116 5E                      		POP		ESI
   204 00000117 5F                      		POP		EDI
   205 00000118 C3                      		RET
